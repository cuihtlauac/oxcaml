name: build
on:
  push:
    branches:
      - main
      - '*microbranch'
    tags:
      - '*'
  pull_request:
jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - name: flambda2_macos_arm64_gi
            config: --enable-middle-end=flambda2 --disable-warn-error --enable-runtime5
            os: macos-latest
            build_ocamlparam: '_,w=-46,regalloc=gi'
            ocamlparam: '_,w=-46,regalloc=gi'

    env:
      J: "3"
      run_testsuite: "true"
      expected_fail: "${{matrix.expected_fail == true}}"

    steps:
    - name: Checkout the Flambda backend repo
      uses: actions/checkout@master
      with:
        path: 'flambda_backend'

    - name: Install AFL (for Linux workers)
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get install afl++

    - name: Install AFL (for macOS workers)
      # The "afl-fuzz" package is deprecated (2023-10) and can no longer be installed
      if: matrix.os == 'macos-latest'
      run: true
      # run: HOMEBREW_NO_INSTALL_CLEANUP=TRUE brew install afl-fuzz

    - name: Install autoconf (for macOS workers)
      if: matrix.os == 'macos-latest'
      run: HOMEBREW_NO_INSTALL_CLEANUP=TRUE brew install autoconf

    - name: Cache OCaml 4.14, dune and menhir
      uses: actions/cache@v4
      id: cache
      with:
        path: ${{ github.workspace }}/ocaml-414/_install
        key: ${{ matrix.os }}-cache-ocaml-414-dune-3152-menhir-20231231

    - name: Checkout OCaml 4.14
      uses: actions/checkout@master
      if: steps.cache.outputs.cache-hit != 'true'
      with:
        repository: 'ocaml/ocaml'
        path: 'ocaml-414'
        ref: '4.14'

    - name: Build OCaml 4.14
      if: steps.cache.outputs.cache-hit != 'true'
      working-directory: ocaml-414
      run: |
        ./configure --prefix=$GITHUB_WORKSPACE/ocaml-414/_install
        make -j $J world.opt
        make install
        # Remove unneeded parts to shrink cache file
        rm -rf $GITHUB_WORKSPACE/ocaml-414/_install/{lib/ocaml/expunge,bin/*.byte}

    - name: Checkout dune github repo
      uses: actions/checkout@master
      if: steps.cache.outputs.cache-hit != 'true'
      with:
        repository: 'ocaml/dune'
        ref: '3.15.2'
        path: 'dune'

    - name: Build dune
      working-directory: dune
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        PATH=$GITHUB_WORKSPACE/ocaml-414/_install/bin:$PATH make release
        cp _boot/dune.exe $GITHUB_WORKSPACE/ocaml-414/_install/bin/dune

    # CR mshinwell: This should use git@gitlab.inria.fr:fpottier/menhir.git
    - name: Checkout menhir github repo
      uses: actions/checkout@master
      if: steps.cache.outputs.cache-hit != 'true'
      with:
        repository: 'LexiFi/menhir'
        ref: '20231231'
        path: 'menhir'

    - name: Build menhir
      working-directory: menhir
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        PATH=$GITHUB_WORKSPACE/ocaml-414/_install/bin:$PATH dune build
        cp _build/install/default/bin/menhir $GITHUB_WORKSPACE/ocaml-414/_install/bin/menhir
        # Our dune rule uses `menhirLib.mli`, which we can't simply `cp`
        # because it's a symbolic link to a relative path.
        export SOURCE_DIR=_build/install/default/lib/menhirLib
        export TARGET_DIR=$GITHUB_WORKSPACE/ocaml-414/_install/lib/menhirLib
        mkdir -p $TARGET_DIR
        cat $SOURCE_DIR/menhirLib.mli > $TARGET_DIR/menhirLib.mli
        cat $SOURCE_DIR/menhirLib.ml > $TARGET_DIR/menhirLib.ml

    - name: Install GNU parallel
      if: matrix.os == 'macos-latest'
      run: HOMEBREW_NO_INSTALL_CLEANUP=TRUE brew install parallel

    - name: Disable any testcases
      working-directory: flambda_backend
      run: |
        disable_testcases="${{matrix.disable_testcases}}"
        if [ -n "$disable_testcases" ]; then
          rm -fv $disable_testcases
        fi

    - name: Configure Flambda backend
      working-directory: flambda_backend
      run: |
        autoconf
        ./configure \
          --prefix=$GITHUB_WORKSPACE/_install \
          --with-dune=$GITHUB_WORKSPACE/ocaml-414/_install/bin/dune \
          ${{ matrix.config }}

    - name: Setup for saving core files (not for macOS at the moment)
      if: matrix.os != 'macos-latest'
      run: |
        sudo mkdir /cores
        sudo chmod 777 /cores
        # Core filenames will be of the form executable.pid.timestamp:
        sudo bash -c 'echo "/cores/%e.%p.%t" > /proc/sys/kernel/core_pattern'

    - name: Build, install and test Flambda backend
      working-directory: flambda_backend
      run: |
        if [ $run_testsuite = true ]; then target=ci; else target=compiler; fi
        export PATH=$GITHUB_WORKSPACE/ocaml-414/_install/bin:$PATH
        ulimit -c unlimited
        make $target \
          || (if [ $expected_fail = true ]; then exit 0; else exit 1; fi);
      env:
        BUILD_OCAMLPARAM: ${{ matrix.build_ocamlparam }}
        OCAMLPARAM: ${{ matrix.ocamlparam }}
        OCAMLRUNPARAM: ${{ matrix.ocamlrunparam }}
        USE_RUNTIME: ${{ matrix.use_runtime }}

    - name: Check other architectures
      working-directory: flambda_backend
      if: matrix.check_arch == true
      run: |
        PATH=$GITHUB_WORKSPACE/ocaml-414/_install/bin:$PATH make check_all_arches

    - uses: actions/upload-artifact@v4
      if: ${{ failure() }} && matrix.os != 'macos-latest'
      with:
        name: cores-${{ github.sha }}
        path: /cores

    - uses: actions/upload-artifact@v4
      if: ${{ failure() }} && matrix.os != 'macos-latest'
      with:
        name: _build-${{ github.sha }}
        path: $GITHUB_WORKSPACE/_build

    - uses: actions/upload-artifact@v4
      if: ${{ failure() }} && matrix.os != 'macos-latest'
      with:
        name: _runtest-${{ github.sha }}
        path: $GITHUB_WORKSPACE/_runtest

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
