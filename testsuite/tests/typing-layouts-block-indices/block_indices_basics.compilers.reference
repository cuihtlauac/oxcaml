module Basic_index_types :
  sig
    type t1 = (int iarray, int) idx_imm
    type 'a t2 = ('a ref, 'a) idx_mut
  end
module Block_access_disambiguated_by_expected_ty :
  sig
    type t1 = { mutable a : string; b : int; }
    type t2 = { mutable a : string; b : int; c : string; }
    val a2 : unit -> (t2, string) idx_mut
    val b2 : unit -> (t2, int) idx_imm
    val a1 : unit -> (t1, string) idx_mut
    val b1 : unit -> (t1, int) idx_imm
    val a1' : unit -> (t1, string) idx_mut
    type ('c, 'b, 'a) mi = ('a, 'b) idx_mut
    type ('c, 'b, 'a) i = ('a, 'b) idx_imm
    val a1'' : unit -> (t1, string) idx_mut
    val b1'' : unit -> (t1, int) idx_imm
  end
module Unboxed_access_disambiguated_by_prev_access :
  sig
    type u = #{ x : int; }
    type u2 = #{ x : string; }
    type 'a r = { u : u; }
    type 'a r2 = { u : u2; }
    val f : unit -> ('a r, int) idx_imm
    type wrap_r = { r : int r#; }
    val f' : unit -> (wrap_r, int) idx_imm
  end
module Type_errors_start : sig end
Line 8, characters 4-11:
8 |     (.a.#a)
        ^^^^^^^
Error: This expression has type "('a t# t, 'a) idx_imm"
       but an expression was expected of type "(y# t, int) idx_imm"
       Type "'a t#" is not compatible with type "y#"
Line 3, characters 16-17:
3 | let f () = (.x.#x)
                    ^
Error: The index preceding this unboxed access has element type "int",
       which is not an unboxed record with field "x".
type 'a t = { t : 'a; }
val f : unit -> ('a t# t, 'a) idx_imm = <fun>
Line 2, characters 32-39:
2 | let f () : (int t, _) idx_imm = (.t.#t)
                                    ^^^^^^^
Error: This expression has type "('a t# t, 'a) idx_imm"
       but an expression was expected of type "(int t, 'b) idx_imm"
       Type "'a t#" is not compatible with type "int"
module Type_errors_end : sig end
module Principality :
  sig
    type u = #{ x : int; }
    type 'a r = { u : u; }
    type 'a r2 = { u : u; }
    val f : bool -> ('a r, int) idx_imm
  end
module Deepening :
  sig
    val idx_imm : ('a, 'b) idx_imm -> ('a, 'b) idx_imm
    val idx_mut : ('a, 'b) idx_mut -> ('a, 'b) idx_mut
  end

